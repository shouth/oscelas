// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node


// Keywords and identifiers

QualifiedIdentifier =
  'ident'
| PrefixedIdentifier

PrefixedIdentifier =
  NamespaceName? '::' 'ident'


// String literals

StringLiteral =
  'string_lit'


// Boolean literals

BoolLiteral =
  'true' | 'false'


// Integer literals

IntegerLiteral =
  'uint_lit' | 'hex_uint_lit' | 'int_lit'


// Float-point literals

FloatLiteral =
  'float_lit'


// Physical type literals

PhysicalLiteral =
  NumberLiteral UnitName

NumberLiteral =
  FloatLiteral | IntegerLiteral

UnitName =
  QualifiedIdentifier


// Top-level structure

OscFile =
  PreludeStatementList MainStatementList

PreludeStatementList =
  PreludeStatement*

MainStatementList =
  MainStatement*


// Prelude statements

PreludeStatement =
  ImportStatement


// Import statement

ImportStatement =
  'import' ImportReference 'newline'

ImportReference =
  ImportReferenceString
| StructuredIdentifier

ImportReferenceString =
  'string'

StructuredIdentifier =
  'ident' ('.' 'ident')*


// Main statements

MainStatement =
  NamespaceStatement
| ExportStatement
| OscDeclaration


// Namespace statement

NamespaceStatement =
  'namespace' NamespaceName NamespaceUseClause? 'newline'

NamespaceUseClause =
  'use' NamespaceList

NamespaceList =
  NamespaceName (',' NamespaceName)*

NamespaceName =
  SimpleNamespaceName
| GlobalNamespaceName

SimpleNamespaceName =
  'ident'

GlobalNamespaceName =
  'null'


// Export statement

ExportStatement =
  'export' ExportSpecificationList 'newline'

ExportSpecificationList =
  ExportSpecification (',' ExportSpecification)*

ExportSpecification =
  QualifiedIdentifier
| ExportWildcardSpecification

ExportWildcardSpecification =
  ExportWildcardSpecificationPrefix? '*'

ExportWildcardSpecificationPrefix =
  NamespaceName? '::'


// Top-level declarations

OscDeclaration =
  PhysicalTypeDeclaration
| UnitDeclaration
| EnumDeclaration
| StructDeclaration
| ActorDeclaration
| ActionDeclaration
| ScenarioDeclaration
| ModifierDeclaration
| TypeExtension
| GlobalParameterDeclaration


// Type declarations

TypeDeclarator =
  NonAggregateTypeDeclarator
| AggregateTypeDeclarator

NonAggregateTypeDeclarator =
  PrimitiveType
| PhysicalTypeName
| EnumName
| StructName
| ActorName
| QualifiedBehaviorName

AggregateTypeDeclarator =
  ListTypeDeclarator

ListTypeDeclarator =
  'list' 'of' NonAggregateTypeDeclarator

PrimitiveType =
  'int' | 'uint' | 'float' | 'bool' | 'string'


// Physical type and units

PhysicalTypeDeclaration =
  'type' PhysicalTypeName 'is' BaseUnitSpecifier 'newline'

PhysicalTypeName =
  QualifiedIdentifier

UnitDeclaration =
  'unit' UnitName 'of' PhysicalTypeName 'is' UnitSpecifier 'newline'

BaseUnitSpecifier =
  SiBaseUnitSpecifier

UnitSpecifier =
  SiUnitSpecifier

SiBaseUnitSpecifier =
  'SI' '(' SiBaseExponentList ')'

SiBaseExponentList =
  SiBaseExponent (',' SiBaseExponent)*

SiBaseExponent =
  SiBaseUnitName ':' IntegerLiteral

SiUnitSpecifier =
  'SI' '(' SiBaseExponentList SiUnitFactor? SiUnitOffset? ')'

SiUnitFactor =
  ',' 'factor' ':' NumberLiteral

SiUnitOffset =
  ',' 'offset' ':' NumberLiteral

SiBaseUnitName =
  'kg' | 'm' | 's' | 'A' | 'K' | 'mol' | 'cd' | 'rad'


// Enumerations

EnumDeclaration =
  'enum' EnumName ':' '[' EnumMemberDeclList ']' 'newline'

EnumMemberDeclList =
  EnumMemberDecl (',' EnumMemberDecl)*

EnumMemberDecl =
  EnumMemberName EnumMemberInitializerClause?

EnumMemberInitializerClause =
  '=' EnumMemberValue

EnumName =
  QualifiedIdentifier

EnumMemberName =
  QualifiedIdentifier

EnumMemberValue =
  'uint_lit' | 'hex_uint_lit'

EnumValueReference =
  EnumValueReferencePrefix? EnumMemberName

EnumValueReferencePrefix =
  EnumName '!'


// Structs

StructDeclaration =
  'struct' StructName StructInheritsClause? (StructBody | 'newline')

StructInheritsClause =
  'inherits' StructName StructInheritsCondition?

StructInheritsCondition =
  '(' FieldName '==' StructInheritsConstant ')'

StructInheritsConstant =
  EnumValueReference
| BoolLiteral

StructBody =
  ':' 'newline' 'indent' StructMemberDeclList 'dedent'

StructMemberDeclList =
  StructMemberDecl*

StructMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration

StructName =
  QualifiedIdentifier

FieldName =
  QualifiedIdentifier


// Actors

ActorDeclaration =
  'actor' ActorName ActorInheritsClause? ActorBody

ActorInheritsClause =
  'inherits' ActorName ActorInheritsCondition?

ActorInheritsCondition =
  '(' FieldName '==' ActorInheritsConstant ')'

ActorInheritsConstant =
  EnumValueReference
| BoolLiteral

ActorBody =
  ActorEmptyBody
| ActorDefinitionBody

ActorEmptyBody =
  'newline'

ActorDefinitionBody =
  ':' 'newline' 'indent' ActorMemberDeclList 'dedent'

ActorMemberDeclList =
  ActorMemberDecl*

ActorMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration

ActorName =
  QualifiedIdentifier


// Scenarios

ScenarioDeclaration =
  'scenario' QualifiedBehaviorName ScenarioInheritsClause? ScenarioBody

ScenarioInheritsClause =
  'inherits' QualifiedBehaviorName ScenarioInheritsCondition?

ScenarioInheritsCondition =
  '(' FieldName '==' ScenarioInheritsConstant ')'

ScenarioInheritsConstant =
  EnumValueReference
| BoolLiteral

ScenarioBody =
  ScenarioEmptyBody
| ScenarioDefinitionBody

ScenarioEmptyBody =
  'newline'

ScenarioDefinitionBody =
  ':' 'newline' 'indent' ScenarioMemberItemList 'dedent'

ScenarioMemberItemList =
  ScenarioMemberItem*

ScenarioMemberItem =
  ScenarioMemberDecl
| BehaviorSpecification

ScenarioMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration

QualifiedBehaviorName =
  QualifiedBehaviorNamePrefix? BehaviorName

QualifiedBehaviorNamePrefix =
  ActorName '.'

BehaviorName =
  QualifiedIdentifier


// Actions

ActionDeclaration =
  'action' QualifiedBehaviorName ActionInheritsClause? ActionBody

ActionInheritsClause =
  'inherits' QualifiedBehaviorName ActionInheritsCondition?

ActionInheritsCondition =
  '(' FieldName '==' ActionInheritsConstant ')'

ActionInheritsConstant =
  EnumValueReference
| BoolLiteral

ActionBody =
  ActionEmptyBody
| ActionDefinitionBody

ActionEmptyBody =
  'newline'

ActionDefinitionBody =
  ':' 'newline' 'indent' ActionMemberItemList 'dedent'

ActionMemberItemList =
  ActionMemberItem*

ActionMemberItem =
  ScenarioMemberDecl
| BehaviorSpecification

// Modifiers

ModifierDeclaration =
  'modifier' ModifierNamePrefix? ModifierName ModifierOfClause? ModifierBody

ModifierNamePrefix =
  ActorName '.'

ModifierName =
  QualifiedIdentifier

ModifierOfClause =
  'of' QualifiedBehaviorName

ModifierBody =
  ModifierEmptyBody
| ModifierDefinitionBody

ModifierEmptyBody =
  'newline'

ModifierDefinitionBody =
  ':' 'newline' 'indent' ModifierMemberItemList 'dedent'

ModifierMemberItemList =
  ModifierMemberItem*

ModifierMemberItem =
  ScenarioMemberDecl
| OnDirective


// Type extension

TypeExtension =
  EnumTypeExtension
| StructuredTypeExtension

EnumTypeExtension =
  'extend' EnumName ':' '[' EnumMemberDeclList ']' 'newline'

StructuredTypeExtension =
  'extend' ExtendableTypeName ':' 'newline' 'indent' ExtendableMemberDeclList 'dedent'

ExtendableMemberDeclList =
  ExtendableMemberDecl*

ExtendableTypeName =
  StructName
| ActorName
| QualifiedBehaviorName

ExtendableMemberDecl =
  StructMemberDecl
| ActorMemberDecl
| ScenarioMemberDecl
| BehaviorSpecification


// Global parameter declarations

GlobalParameterDeclaration =
  'global' ParameterDeclaration


// Events

EventDeclaration =
  'event' EventName EventArgumentListSpecification? EventIsClause? 'newline'

EventArgumentListSpecification =
  '(' ArgumentListSpecification ')'

EventIsClause =
  'is' EventSpecification

EventSpecification =
  EventReferenceSpecification
| EventCondition

EventReferenceSpecification =
  EventReference EventReferenceCondition?

EventReferenceCondition =
  EventFieldDecl? 'if' EventCondition

EventReference =
  '@' EventPath

EventFieldDecl =
  'as' EventFieldName

EventFieldName =
  QualifiedIdentifier

EventName =
  QualifiedIdentifier

EventPath =
  EventPathPrefix? EventName

EventPathPrefix =
  Expression '.'

EventCondition =
  BoolExpression
| RiseExpression
| FallExpression
| ElapsedExpression
| EveryExpression

RiseExpression =
  'rise' '(' BoolExpression ')'

FallExpression =
  'fall' '(' BoolExpression ')'

ElapsedExpression =
  'elapsed' '(' DurationExpression ')'

EveryExpression =
  'every' '(' DurationExpression EveryExpressionOffset? ')'

EveryExpressionOffset =
  ',' 'offset' ':' DurationExpression

BoolExpression =
  Expression

DurationExpression =
  Expression


// Fields

FieldDeclaration =
  ParameterDeclaration
| VariableDeclaration

ParameterDeclaration =
  FieldNameList ':' TypeDeclarator ParameterInitilizerClause? (ParameterWithDeclaration | 'newline')

FieldNameList =
  FieldName (',' FieldName)*

ParameterInitilizerClause =
  '=' DefaultValue

VariableDeclaration =
  'var' FieldNameList ':' TypeDeclarator VariableInitializerClause? 'newline'

VariableInitializerClause =
  '=' VariableInitializerValue

VariableInitializerValue =
  DefaultValue
| SampleExpression

SampleExpression =
  'sample' '(' Expression ',' EventSpecification SampleExpressionDefaultValue? ')'

SampleExpressionDefaultValue =
  ',' DefaultValue

DefaultValue =
  Expression

ParameterWithDeclaration =
  'with' ':' 'newline' 'indent' ParameterWithMember 'dedent'

ParameterWithMember =
  ConstraintDeclaration


// Constraints

ConstraintDeclaration =
  KeepConstraintDeclaration
| RemoveDefaultDeclaration

KeepConstraintDeclaration =
  'keep' '(' ConstraintQualifier? ConstraintExpression ')' 'newline'

ConstraintQualifier =
  'default' | 'hard'

ConstraintExpression =
  Expression

RemoveDefaultDeclaration =
  'remove_default' '(' ParameterReference ')' 'newline'

ParameterReference =
  FieldName
| FieldAccess


// Methods

MethodDeclaration =
  'def' MethodName '(' ArgumentListSpecification? ')' ReturnTypeClause? MethodImplementation 'newline'

ReturnTypeClause =
  '->' ReturnType

ReturnType =
  TypeDeclarator

MethodImplementation =
  'is' MethodQualifier? MethodImplementationBody

MethodQualifier =
  'only'

MethodImplementationBody =
  MethodExpression
| MethodUndefined
| MethodExternal

MethodExpression =
  'expression' Expression

MethodUndefined =
  'undefined'

MethodExternal =
  'external' StructuredIdentifier '(' ArgumentList? ')'

MethodName =
  QualifiedIdentifier


// Coverage

CoverageDeclaration =
  ('cover' | 'record') '(' ArgumentList ')' 'newline'


// Modifier application

ModifierApplication =
  ModifierApplicationPrefix? ModifierName '(' ArgumentList? ')' 'newline'

ModifierApplicationPrefix =
  ActorExpression '.'


// Behavior specification

BehaviorSpecification =
  OnDirective
| DoDirective


// On directive

OnDirective =
  'on' EventSpecification ':' 'newline' 'indent' OnMemberList 'dedent'

OnMemberList =
  OnMember*

OnMember =
  CallDirective
| EmitDirective

DoDirective =
  'do' DoMember

DoMember =
  DoMemberLabel? DoMemberBody

DoMemberLabel =
  LabelName ':'

DoMemberBody =
  Composition
| BehaviorInvocation
| WaitDirective
| EmitDirective
| CallDirective

LabelName =
  QualifiedIdentifier


// Composition

Composition =
  CompositionOperator CompositionArgumentList? 'newline' 'indent' DoMemberList 'dedent' BehaviorWithDeclaration?

CompositionArgumentList =
  '(' UnqualifiedArgumentList ')'

DoMemberList =
  DoMember*

CompositionOperator =
  'serial' | 'one_of' | 'parallel'


// Behavior invocation

BehaviorInvocation =
  BehaviorInvocationPrefix? BehaviorName '(' ArgumentList? ')' (BehaviorWithDeclaration | 'newline')

BehaviorInvocationPrefix =
  ActorExpression '.'

BehaviorWithDeclaration =
  'with' ':' 'newline' 'indent' BehaviorWithMemberList 'dedent'

BehaviorWithMemberList =
  BehaviorWithMember*

BehaviorWithMember =
  ConstraintDeclaration
| ModifierApplication
| UntilDirective

ActorExpression =
  Expression


// Wait directive

WaitDirective =
  'wait' EventSpecification 'newline'


// Emit directive

EmitDirective =
  'emit' EventName EmitDirectiveArgumentList? 'newline'

EmitDirectiveArgumentList =
  '(' ArgumentList ')'


// Call directive

CallDirective =
  'call' MethodInvocation 'newline'

MethodInvocation =
  PostfixExp '(' ArgumentList? ')'


// Until directive

UntilDirective =
  'until' EventSpecification 'newline'


// Argumen list specification

ArgumentListSpecification =
  ArgumentSpecification (',' ArgumentSpecification)*

ArgumentSpecification =
  ArgumentName ':' TypeDeclarator ArgumentSpecificationInitializerClause?

ArgumentSpecificationInitializerClause =
  '=' DefaultValue

ArgumentName =
  QualifiedIdentifier


// Argument list

ArgumentList =
  MixedArgumentList
| NamedArgumentList

MixedArgumentList =
  PositionalArgumentList SuccessiveNamedArgumentList?

PositionalArgumentList =
  PositionalArgument (',' PositionalArgument)*

SuccessiveNamedArgumentList =
  ',' NamedArgumentList

PositionalArgument =
  Expression

NamedArgumentList =
  NamedArgument (',' NamedArgument)*

NamedArgument =
  ArgumentName ':' Expression


// Unqualified argument list

UnqualifiedArgumentList =
  PositionalArgumentList SuccessiveUnqualifiedNamedArgumentList?
| UnqualifiedNamedArgumentList?

SuccessiveUnqualifiedNamedArgumentList =
  ',' UnqualifiedNamedArgumentList

UnqualifiedNamedArgumentList =
  UnqualifiedNamedArgument (',' UnqualifiedNamedArgument)*

UnqualifiedArgumentName =
  'ident'

UnqualifiedNamedArgument =
  UnqualifiedArgumentName ':' Expression


// Expressions

Expression =
  Implication
| TernaryOpExp


// Ternary operator

TernaryOpExp =
  Implication '?' Implication ':' Implication


// Logical operators

Implication =
  Disjunction ('=>' Disjunction)*

Disjunction =
  Conjunction ('or' Conjunction)*

Conjunction =
  Inversion ('and' Inversion)*

Inversion =
  'not' Inversion
| Relation


// Relational operators

Relation =
  Sum
| Sum RelationalOp Sum

RelationalOp =
  '==' | '!=' | '<' | '<=' | '>' | '>=' | 'in'


// Arithmetic operators

Sum =
  Term
| Sum AdditiveOp Term

AdditiveOp =
  '+' | '-'

Term =
  Factor
| Term MultiplicativeOp Factor

MultiplicativeOp =
  '*' | '/' | '%'

Factor =
  PostfixExp
| '-' Factor


// Postfix operators

PostfixExp =
  PrimaryExp
| CastExp
| TypeTestExp
| ElementAccess
| FunctionApplication
| FieldAccess

CastExp =
  PostfixExp '.' 'as' '(' TypeDeclarator ')'

TypeTestExp =
  PostfixExp '.' 'is' '(' TypeDeclarator ')'

ElementAccess =
  PostfixExp '[' Expression ']'

FunctionApplication =
  PostfixExp '(' ArgumentList? ')'

FieldAccess =
  PostfixExp '.' FieldName


// Primary expressions

PrimaryExp =
  ValueExp
| ItExp
| QualifiedIdentifier
| ParenthesizedExp

ItExp =
  'it'

ParenthesizedExp =
  '(' Expression ')'

ValueExp =
  IntegerLiteral
| FloatLiteral
| PhysicalLiteral
| BoolLiteral
| StringLiteral
| EnumValueReference
| ListConstructor
| RangeConstructor


// List and range constructors

ListConstructor =
  '[' ExpressionList ']'

ExpressionList =
  Expression (',' Expression)*

RangeConstructor =
  ParenthesesRangeConstructor
| BracketsRangeConstructor

ParenthesesRangeConstructor =
  'range' '(' Expression ',' Expression ')'

BracketsRangeConstructor =
  '[' Expression '..' Expression ']'
