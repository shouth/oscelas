pub struct TokenData<'a> {
    pub punct: &'a [(&'a str, &'a str)],
    pub keyword: &'a [&'a str],
    pub literal: &'a [&'a str],
    pub token: &'a [&'a str],
}

pub const DSL_TOKENS: TokenData<'_> = TokenData {
    punct: &[
        (".", "DOT"),
        (",", "COMMA"),
        (":", "COLON"),
        ("::", "COLON_COLON"),
        ("=", "ASSIGN"),
        ("@", "AT"),
        ("->", "ARROW"),
        ("(", "L_PAREN"),
        (")", "R_PAREN"),
        ("[", "L_BRACKET"),
        ("]", "R_BRACKET"),
        ("?", "QUESTION"),
        ("!", "EXCLAMATION"),
        ("=>", "FAT_ARROW"),
        ("==", "EQUAL"),
        ("!=", "NOT_EQUAL"),
        ("<", "LESS"),
        ("<=", "LESS_EQ"),
        (">", "GREATER"),
        (">=", "GREATER_EQ"),
        ("+", "PLUS"),
        ("-", "MINUS"),
        ("*", "STAR"),
        ("/", "SLASH"),
        ("%", "PERCENT"),
    ],
    keyword: &[
        "action",
        "actor",
        "and",
        "as",
        "bool",
        "call",
        "cd",
        "cover",
        "def",
        "default",
        "do",
        "elapsed",
        "emit",
        "enum",
        "event",
        "every",
        "export",
        "expression",
        "extend",
        "external",
        "factor",
        "fall",
        "false",
        "float",
        "global",
        "hard",
        "if",
        "import",
        "in",
        "inf",
        "inherits",
        "int",
        "is",
        "it",
        "K",
        "keep",
        "kg",
        "list",
        "m",
        "modifier",
        "mol",
        "namespace",
        "nan",
        "not",
        "null",
        "of",
        "offset",
        "on",
        "one_of",
        "only",
        "or",
        "parallel",
        "rad",
        "range",
        "record",
        "remove_default",
        "rise",
        "s",
        "sample",
        "scenario",
        "serial",
        "SI",
        "string",
        "struct",
        "true",
        "type",
        "uint",
        "undefined",
        "unit",
        "until",
        "use",
        "var",
        "wait",
        "with",
    ],
    literal: &["INT_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL"],
    token: &[
        "WHITESPACE",
        "COMMENT",
        "NEWLINE",
        "INDENT",
        "DEDENT",
        "IDENTIFIER",
    ],
};
