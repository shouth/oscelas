// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node


// Keywords and identifiers

QualifiedIdentifier =
  IdentifierPrefix? 'identifier'

IdentifierPrefix =
  NamespaceName? '::'


// Boolean literals

BoolLiteral =
  'true' | 'false'


// Physical type literals

PhysicalLiteral =
  NumberLiteral unit_name:QualifiedIdentifier

NumberLiteral =
  'float_literal' | 'integer_literal'


// Top-level structure

OscFile =
  PreludeStatementList MainStatementList

PreludeStatementList =
  PreludeStatement*

MainStatementList =
  MainStatement*


// Prelude statements

PreludeStatement =
  ImportStatement


// Import statement

ImportStatement =
  'import' ImportReference 'newline'

ImportReference =
  ImportReferenceString
| StructuredIdentifier

ImportReferenceString =
  'string_literal'

StructuredIdentifier =
  'identifier' ('.' 'identifier')*


// Main statements

MainStatement =
  NamespaceStatement
| ExportStatement
| OscDeclaration


// Namespace statement

NamespaceStatement =
  'namespace' NamespaceName NamespaceUseClause? 'newline'

NamespaceUseClause =
  'use' NamespaceList

NamespaceList =
  NamespaceName (',' NamespaceName)*

NamespaceName = 'identifier' | 'null'


// Export statement

ExportStatement =
  'export' ExportSpecificationList 'newline'

ExportSpecificationList =
  ExportSpecification (',' ExportSpecification)*

ExportSpecification =
  QualifiedIdentifier
| ExportWildcardSpecification

ExportWildcardSpecification =
  ExportWildcardSpecificationPrefix? '*'

ExportWildcardSpecificationPrefix =
  NamespaceName? '::'


// Top-level declarations

OscDeclaration =
  PhysicalTypeDeclaration
| UnitDeclaration
| EnumDeclaration
| StructDeclaration
| ActorDeclaration
| ActionDeclaration
| ScenarioDeclaration
| ModifierDeclaration
| TypeExtension
| GlobalParameterDeclaration


// Type declarations

TypeDeclarator =
  NonAggregateTypeDeclarator
| AggregateTypeDeclarator

NonAggregateTypeDeclarator =
  PrimitiveType
| TypeReference

AggregateTypeDeclarator =
  ListTypeDeclarator

ListTypeDeclarator =
  'list' 'of' NonAggregateTypeDeclarator

PrimitiveType =
  'int' | 'uint' | 'float' | 'bool' | 'string'

TypeReference =
  QualifiedIdentifier
| QualifiedBehaviorName


// Physical type and units

PhysicalTypeDeclaration =
  'type' physical_type_name:QualifiedIdentifier 'is' BaseUnitSpecifier 'newline'

UnitDeclaration =
  'unit' unit_name:QualifiedIdentifier 'of' physical_type_name:QualifiedIdentifier 'is' UnitSpecifier 'newline'

BaseUnitSpecifier =
  SiBaseUnitSpecifier

UnitSpecifier =
  SiUnitSpecifier

SiBaseUnitSpecifier =
  'SI' '(' SiBaseExponentList ')'

SiBaseExponentList =
  SiBaseExponent (',' SiBaseExponent)*

SiBaseExponent =
  SiBaseUnitName ':' 'integer_literal'

SiUnitSpecifier =
  'SI' '(' SiBaseExponentList TrailingSiFactor? TrailingSiOffset? ')'

TrailingSiFactor =
  ',' 'factor' ':' NumberLiteral

TrailingSiOffset =
  ',' 'offset' ':' NumberLiteral

SiBaseUnitName =
  'kg' | 'm' | 's' | 'A' | 'K' | 'mol' | 'cd' | 'rad'


// Enumerations

EnumDeclaration =
  'enum' enum_name:QualifiedIdentifier ':' '[' EnumMemberDeclList ']' 'newline'

EnumMemberDeclList =
  EnumMemberDecl (',' EnumMemberDecl)*

EnumMemberDecl =
  enum_member_name:QualifiedIdentifier EnumMemberInitializer?

EnumMemberInitializer =
  '=' EnumMemberValue

EnumMemberValue =
  'integer_literal'

EnumValueReference =
  EnumValueReferencePrefix? enum_member_name:QualifiedIdentifier

EnumValueReferencePrefix =
  enum_name:QualifiedIdentifier '!'


// Structs

StructDeclaration =
  'struct' struct_name:QualifiedIdentifier StructInheritsClause? StructBodyOrNewline

StructInheritsClause =
  'inherits' struct_name:QualifiedIdentifier StructInheritsCondition?

StructInheritsCondition =
  '(' field_name:QualifiedIdentifier '==' StructInheritsConstant ')'

StructInheritsConstant =
  EnumValueReference
| BoolLiteral

StructBodyOrNewline =
  StructBody | 'newline'

StructBody =
  ':' 'newline' 'indent' StructMemberDeclList 'dedent'

StructMemberDeclList =
  StructMemberDecl*

StructMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration


// Actors

ActorDeclaration =
  'actor' actor_name:QualifiedIdentifier ActorInheritsClause? ActorBodyOrNewline

ActorInheritsClause =
  'inherits' actor_name:QualifiedIdentifier ActorInheritsCondition?

ActorInheritsCondition =
  '(' field_name:QualifiedIdentifier '==' ActorInheritsConstant ')'

ActorInheritsConstant =
  EnumValueReference
| BoolLiteral

ActorBodyOrNewline =
  ActorBody | 'newline'

ActorBody =
  ':' 'newline' 'indent' ActorMemberDeclList 'dedent'

ActorMemberDeclList =
  ActorMemberDecl*

ActorMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration


// Scenarios

ScenarioDeclaration =
  'scenario' QualifiedBehaviorName ScenarioInheritsClause? ScenarioBodyOrNewline

ScenarioInheritsClause =
  'inherits' QualifiedBehaviorName ScenarioInheritsCondition?

ScenarioInheritsCondition =
  '(' field_name:QualifiedIdentifier '==' ScenarioInheritsConstant ')'

ScenarioInheritsConstant =
  EnumValueReference
| BoolLiteral

ScenarioBodyOrNewline =
  ScenarioBody | 'newline'

ScenarioBody =
  ':' 'newline' 'indent' ScenarioMemberItemList 'dedent'

ScenarioMemberItemList =
  ScenarioMemberItem*

ScenarioMemberItem =
  ScenarioMemberDecl
| BehaviorSpecification

ScenarioMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration
| ModifierApplication

QualifiedBehaviorName =
  QualifiedBehaviorNamePrefix? behavior_name:QualifiedIdentifier

QualifiedBehaviorNamePrefix =
  actor_name:QualifiedIdentifier '.'


// Actions

ActionDeclaration =
  'action' QualifiedBehaviorName ActionInheritsClause? ActionBodyOrNewline

ActionBodyOrNewline =
  ActionBody | 'newline'

ActionInheritsClause =
  'inherits' QualifiedBehaviorName ActionInheritsCondition?

ActionInheritsCondition =
  '(' field_name:QualifiedIdentifier '==' ActionInheritsConstant ')'

ActionInheritsConstant =
  EnumValueReference
| BoolLiteral

ActionBody =
  ':' 'newline' 'indent' ActionMemberItemList 'dedent'

ActionMemberItemList =
  ActionMemberItem*

ActionMemberItem =
  ScenarioMemberDecl
| BehaviorSpecification

// Modifiers

ModifierDeclaration =
  'modifier' ModifierNamePrefix? modifier_name:QualifiedIdentifier ModifierOfClause? ModifierBodyOrNewline

ModifierNamePrefix =
  actor_name:QualifiedIdentifier '.'

ModifierOfClause =
  'of' QualifiedBehaviorName

ModifierBodyOrNewline =
  ModifierBody | 'newline'

ModifierBody =
  ':' 'newline' 'indent' ModifierMemberItemList 'dedent'

ModifierMemberItemList =
  ModifierMemberItem*

ModifierMemberItem =
  ScenarioMemberDecl
| OnDirective


// Type extension

TypeExtension =
  EnumTypeExtension
| StructuredTypeExtension

EnumTypeExtension =
  'extend' enum_name:QualifiedIdentifier ':' '[' EnumMemberDeclList ']' 'newline'

StructuredTypeExtension =
  'extend' TypeReference ':' 'newline' 'indent' ExtensionMemberDeclList 'dedent'

ExtensionMemberDeclList =
  ExtensionMemberDecl*

ExtensionMemberDecl =
  RelaxedExtensionMemberDecl
| BehaviorSpecification

RelaxedExtensionMemberDecl =
  EventDeclaration
| ParameterDeclaration
| VariableDeclaration
| KeepConstraintDeclaration
| RemoveDefaultDeclaration
| MethodDeclaration
| CoverageDeclaration
| ModifierApplication


// Global parameter declarations

GlobalParameterDeclaration =
  'global' ParameterDeclaration


// Events

EventDeclaration =
  'event' event_name:QualifiedIdentifier EventArgumentListSpecification? EventIsClause? 'newline'

EventArgumentListSpecification =
  '(' ArgumentListSpecification ')'

EventIsClause =
  'is' EventSpecification

EventSpecification =
  EventReferenceSpecification
| EventCondition

EventReferenceSpecification =
  EventReference EventReferenceCondition?

EventReferenceCondition =
  EventFieldDecl? 'if' EventCondition

EventReference =
  '@' EventPath

EventFieldDecl =
  'as' event_field_name:QualifiedIdentifier

EventPath =
  EventPathPrefix? event_name:QualifiedIdentifier

EventPathPrefix =
  Expression '.'

EventCondition =
  BoolExpression
| RiseExpression
| FallExpression
| ElapsedExpression
| EveryExpression

RiseExpression =
  'rise' '(' BoolExpression ')'

FallExpression =
  'fall' '(' BoolExpression ')'

ElapsedExpression =
  'elapsed' '(' DurationExpression ')'

EveryExpression =
  'every' '(' DurationExpression TrailingEveryExpOffset? ')'

TrailingEveryExpOffset =
  ',' 'offset' ':' DurationExpression

BoolExpression =
  Expression

DurationExpression =
  Expression


// Fields

FieldDeclaration =
  ParameterDeclaration
| VariableDeclaration

ParameterDeclaration =
  FieldNameList ':' TypeDeclarator ParameterInitilizerClause? ParameterWithDeclarationOrNewline

FieldNameList =
  QualifiedIdentifier (',' QualifiedIdentifier)*

ParameterInitilizerClause =
  '=' DefaultValue

VariableDeclaration =
  'var' field_name:FieldNameList ':' TypeDeclarator VariableInitializer? 'newline'

VariableInitializer =
  '=' VariableInitializerValue

VariableInitializerValue =
  DefaultValue
| SampleExpression

SampleExpression =
  'sample' '(' Expression ',' EventSpecification SampleDefaultValue? ')'

SampleDefaultValue =
  ',' DefaultValue

DefaultValue =
  Expression

ParameterWithDeclarationOrNewline =
  ParameterWithDeclaration | 'newline'

ParameterWithDeclaration =
  'with' ':' 'newline' 'indent' ParameterWithMember 'dedent'

ParameterWithMember =
  ConstraintDeclaration


// Constraints

ConstraintDeclaration =
  KeepConstraintDeclaration
| RemoveDefaultDeclaration

KeepConstraintDeclaration =
  'keep' '(' ConstraintQualifier? ConstraintExpression ')' 'newline'

ConstraintQualifier =
  'default' | 'hard'

ConstraintExpression =
  Expression

RemoveDefaultDeclaration =
  'remove_default' '(' ParameterReference ')' 'newline'

ParameterReference =
  QualifiedIdentifier
| FieldAccess


// Methods

MethodDeclaration =
  'def' method_name:QualifiedIdentifier '(' ArgumentListSpecification? ')' MethodReturnType? MethodImplementation 'newline'

MethodReturnType =
  '->' ReturnType

ReturnType =
  TypeDeclarator

MethodImplementation =
  'is' MethodQualifier? MethodBody

MethodQualifier =
  'only'

MethodBody =
  MethodExpressionBody
| MethodUndefinedBody
| MethodExternalBody

MethodExpressionBody =
  'expression' Expression

MethodUndefinedBody =
  'undefined'

MethodExternalBody =
  'external' StructuredIdentifier '(' ArgumentList? ')'


// Coverage

CoverageDeclaration =
  CoverageOperator '(' ArgumentList ')' 'newline'

CoverageOperator =
  'cover' | 'record'


// Modifier application

ModifierApplication =
  ModifierApplicationPrefix? modifier_name:QualifiedIdentifier '(' ArgumentList? ')' 'newline'

ModifierApplicationPrefix =
  ActorExpression '.'


// Behavior specification

BehaviorSpecification =
  OnDirective
| DoDirective


// On directive

OnDirective =
  'on' EventSpecification ':' 'newline' 'indent' OnMemberList 'dedent'

OnMemberList =
  OnMember*

OnMember =
  CallDirective
| EmitDirective

DoDirective =
  'do' DoMember

DoMember =
  DoMemberLabel? DoMemberBody

DoMemberLabel =
  label_name:QualifiedIdentifier ':'

DoMemberBody =
  Composition
| BehaviorInvocation
| WaitDirective
| EmitDirective
| CallDirective


// Composition

Composition =
  CompositionOperator CompositionArguments? ':' 'newline' 'indent' DoMemberList 'dedent' BehaviorWithDeclaration?

CompositionArguments =
  '(' UnqualifiedArgumentList ')'

DoMemberList =
  DoMember*

CompositionOperator =
  'serial' | 'one_of' | 'parallel'


// Behavior invocation

BehaviorInvocation =
  BehaviorInvocationPrefix? behavior_name:QualifiedIdentifier '(' ArgumentList? ')' BehaviorWithDeclarationOrNewline

BehaviorInvocationPrefix =
  ActorExpression '.'

BehaviorWithDeclarationOrNewline =
  BehaviorWithDeclaration | 'newline'

BehaviorWithDeclaration =
  'with' ':' 'newline' 'indent' BehaviorWithMemberList 'dedent'

BehaviorWithMemberList =
  BehaviorWithMember*

BehaviorWithMember =
  ConstraintDeclaration
| ModifierApplication
| UntilDirective

ActorExpression =
  Expression


// Wait directive

WaitDirective =
  'wait' EventSpecification 'newline'


// Emit directive

EmitDirective =
  'emit' event_name:QualifiedIdentifier EmitArguments? 'newline'

EmitArguments =
  '(' ArgumentList ')'


// Call directive

CallDirective =
  'call' MethodInvocation 'newline'

MethodInvocation =
  Expression '(' ArgumentList? ')'


// Until directive

UntilDirective =
  'until' EventSpecification 'newline'


// Argumen list specification

ArgumentListSpecification =
  ArgumentSpecification (',' ArgumentSpecification)*

ArgumentSpecification =
  argument_name:QualifiedIdentifier ':' TypeDeclarator ArgumentInitializer?

ArgumentInitializer =
  '=' DefaultValue


// Argument list

ArgumentList =
  PositionalArgumentList? NamedArgumentList?

PositionalArgumentList =
  PositionalArgument (',' PositionalArgument)* ','?

PositionalArgument =
  Expression

NamedArgumentList =
  NamedArgument (',' NamedArgument)*

NamedArgument =
  argument_name:QualifiedIdentifier ':' Expression


// Unqualified argument list

UnqualifiedArgumentList =
  PositionalArgumentList? UnqualifiedNamedArgumentList?

UnqualifiedNamedArgumentList =
  UnqualifiedNamedArgument (',' UnqualifiedNamedArgument)*

UnqualifiedNamedArgument =
  unqualified_argument_name:QualifiedIdentifier ':' Expression


// Expressions

Expression =
  TernaryOpExp
| LogicalOpExp
| BinaryOpExp
| UnaryOpExp
| CastExp
| TypeTestExp
| ElementAccess
| FunctionApplication
| FieldAccess
| ItExp
| QualifiedIdentifier
| ParenthesizedExp
| LiteralExp
| EnumValueReference
| ListConstructor
| RangeConstructor

TernaryOpExp =
  condition:Expression '?' then_expr:Expression ':' else_expr:Expression

LogicalOpExp =
  lhs_expr:Expression LogicalOp rhs_expr:Expression

LogicalOp =
  '=>' | 'or' | 'and'

BinaryOpExp =
  lhs_expr:Expression BinaryOp rhs_expr:Expression

BinaryOp =
  '==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | '+' | '-' | '*' | '/' | '%'

UnaryOpExp =
  UnaryOp Expression

UnaryOp =
  'not' | '-'

CastExp =
  Expression '.' 'as' '(' TypeDeclarator ')'

TypeTestExp =
  Expression '.' 'is' '(' TypeDeclarator ')'

ElementAccess =
  object_expr:Expression '[' index_expr:Expression ']'

FunctionApplication =
  Expression '(' ArgumentList? ')'

FieldAccess =
  Expression '.' field_name:QualifiedIdentifier

ItExp =
  'it'

ParenthesizedExp =
  '(' Expression ')'

LiteralExp =
  'integer_literal'
| 'float_literal'
| PhysicalLiteral
| BoolLiteral
| 'string_literal'


// List and range constructors

ListConstructor =
  '[' ExpressionList ']'

ExpressionList =
  Expression (',' Expression)*

RangeConstructor =
  ParenthesesRangeConstructor
| BracketsRangeConstructor

ParenthesesRangeConstructor =
  'range' '(' begin_expr:Expression ',' end_expr:Expression ')'

BracketsRangeConstructor =
  '[' begin_expr:Expression '..' end_expr:Expression ']'
