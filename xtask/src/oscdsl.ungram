// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node


// identifier ::= ( id-start-char id-char* ) | ( '|' non-vertical-line-char+ '|' )
// qualified-identifier ::= identifier | prefixed-identifier
// prefixed-identifier ::= ( [ namespace-name ] '::' identifier )

QualifiedIdentifier =
  'identifier'
| PrefixedIdentifier

PrefixedIdentifier =
  namespace_name:NamespaceName? '::' 'identifier'


// bool-literal ::= 'true' | 'false'

BoolLiteral =
  'true' | 'false'


// physical-literal ::= (float-literal | integer-literal) unit-name
// unit-name ::= qualified-identifier

PhysicalLiteral =
  NumberLiteral unit_name:QualifiedIdentifier

NumberLiteral =
  'float_literal' | 'integer_literal'


// osc-file ::= prelude-statement* main-statement*

OscFile =
  PreludeStatementList MainStatementList

PreludeStatementList =
  PreludeStatement*

MainStatementList =
  MainStatement*


// prelude-statement ::= import-statement

PreludeStatement =
  ImportStatement


// import-statement ::= 'import' import-reference NEWLINE
// import-reference ::= string-literal | structured-identifier
//
// structured-identifier ::= identifier | structured-identifier '.' identifier

ImportStatement =
  'import' ImportReference 'newline'

ImportReference =
  'string_literal'
| StructuredIdentifier

StructuredIdentifier =
  'identifier' ('.' 'identifier')*


// main-statement ::= namespace-statement | export-statement | osc-declaration

MainStatement =
  NamespaceStatement
| ExportStatement
| OscDeclaration


// namespace-statement ::= 'namespace' namespace-name ['use' namespace-list ] NEWLINE
//
// namespace-list ::= namespace-name (',' namespace-name)*
// namespace-name ::= identifier | global-namespace-name
// global-namespace-name ::= 'null'

NamespaceStatement =
  'namespace' NamespaceName NamespaceUseClause? 'newline'

NamespaceUseClause =
  'use' NamespaceList

NamespaceList =
  NamespaceName (',' NamespaceName)*

NamespaceName = 'identifier' | 'null'


// export-statement ::= 'export' export-specification (',' export-specification)* NEWLINE
// export-specification ::= qualified-identifier | export-wildcard-specification
// export-wildcard-specification ::=[ [ namespace-name ] '::' ] '*'

ExportStatement =
  'export' ExportSpecificationList 'newline'

ExportSpecificationList =
  ExportSpecification (',' ExportSpecification)*

ExportSpecification =
  QualifiedIdentifier
| ExportWildcardSpecification

ExportWildcardSpecification =
  '*'
| PrefixedExportWildcardSpecification

PrefixedExportWildcardSpecification =
  namespace_name:QualifiedIdentifier? '::' '*'


// osc-declaration ::=   physical-type-declaration
//                     | unit-declaration
//                     | enum-declaration
//                     | struct-declaration
//                     | actor-declaration
//                     | action-declaration
//                     | scenario-declaration
//                     | modifier-declaration
//                     | type-extension
//                     | global-parameter-declaration

OscDeclaration =
  PhysicalTypeDeclaration
| UnitDeclaration
| EnumDeclaration
| StructDeclaration
| ActorDeclaration
| ActionDeclaration
| ScenarioDeclaration
| ModifierDeclaration
| TypeExtension
| GlobalParameterDeclaration


// type-declarator ::= non-aggregate-type-declarator | aggregate-type-declarator
//
// non-aggregate-type-declarator ::= primitive-type | physical-type-name | enum-name | struct-name | actor-name | qualified-behavior-name
//
// aggregate-type-declarator ::= list-type-declarator
// list-type-declarator ::= 'list' 'of' non-aggregate-type-declarator
//
// primitive-type ::= 'int' | 'uint' | 'float' | 'bool' | 'string'

TypeDeclarator =
  NonAggregateTypeDeclarator
| AggregateTypeDeclarator

NonAggregateTypeDeclarator =
  PrimitiveType
| TypeReference

AggregateTypeDeclarator =
  ListTypeDeclarator

ListTypeDeclarator =
  'list' 'of' NonAggregateTypeDeclarator

PrimitiveType =
  'int' | 'uint' | 'float' | 'bool' | 'string'

TypeReference =
  QualifiedIdentifier
| QualifiedBehaviorName


// physical-type-declaration ::= 'type' physical-type-name 'is' base-unit-specifier NEWLINE
// physical-type-name ::= qualified-identifier
//
// unit-declaration ::= 'unit' unit-name 'of' physical-type-name 'is' unit-specifier NEWLINE
//
// base-unit-specifier ::= SI-base-unit-specifier
// unit-specifier ::= SI-unit-specifier
//
// SI-base-unit-specifier ::= 'SI' '(' SI-base-exponent-list ')'
// SI-base-exponent-list ::= SI-base-exponent (',' SI-base-exponent)*
// SI-base-exponent ::= SI-base-unit-name ':' integer-literal
//
// SI-unit-specifier ::= 'SI' '(' SI-base-exponent-list [',' SI-factor] [',' SI-offset] ')'
// SI-factor ::= 'factor' ':' ( float-literal | integer-literal )
// SI-offset ::= 'offset' ':' ( float-literal | integer-literal )
// SI-base-unit-name ::= 'kg' | 'm' | 's' | 'A' | 'K' | 'mol' | 'cd' | 'rad'

PhysicalTypeDeclaration =
  'type' physical_type_name:QualifiedIdentifier 'is' BaseUnitSpecifier 'newline'

UnitDeclaration =
  'unit' unit_name:QualifiedIdentifier 'of' physical_type_name:QualifiedIdentifier 'is' UnitSpecifier 'newline'

BaseUnitSpecifier =
  SiBaseUnitSpecifier

UnitSpecifier =
  SiUnitSpecifier

SiBaseUnitSpecifier =
  'SI' '(' SiBaseExponentList ')'

SiBaseExponentList =
  SiBaseExponent (',' SiBaseExponent)*

SiBaseExponent =
  SiBaseUnitName ':' Expression

SiUnitSpecifier =
  'SI' '(' SiBaseExponentList TrailingSiFactor? TrailingSiOffset? ')'

TrailingSiFactor =
  ',' 'factor' ':' Expression

TrailingSiOffset =
  ',' 'offset' ':' Expression

SiBaseUnitName =
  'kg' | 'm' | 's' | 'A' | 'K' | 'mol' | 'cd' | 'rad'


// enum-declaration ::= 'enum' enum-name ':' '[' enum-member-decl (',' enum-member-decl)* ']' NEWLINE
// enum-member-decl ::= enum-member-name [ '=' enum-member-value ]
// enum-name ::= qualified-identifier
// enum-member-name ::= qualified-identifier
// enum-member-value ::= uint-literal | hex-uint-literal
//
// enum-value-reference ::= [enum-name '!'] enum-member-name

EnumDeclaration =
  'enum' enum_name:QualifiedIdentifier ':' '[' EnumMemberDeclList ']' 'newline'

EnumMemberDeclList =
  EnumMemberDecl (',' EnumMemberDecl)*

EnumMemberDecl =
  enum_member_name:QualifiedIdentifier EnumMemberInitializer?

EnumMemberInitializer =
  '=' enum_member_value:Expression

EnumValueReference =
  QualifiedIdentifier
| PrefixedEnumValueReference

PrefixedEnumValueReference =
  enum_name:QualifiedIdentifier '!' enum_member_name:QualifiedIdentifier


// struct-declaration ::= 'struct' struct-name ['inherits' struct-name ['(' field-name '=='  (enum-value-reference | bool-literal) ')']] ( (':' NEWLINE INDENT
//       struct-member-decl+ DEDENT) | NEWLINE )
//
// struct-member-decl ::= event-declaration | field-declaration | constraint-declaration | method-declaration | coverage-declaration
// struct-name ::= qualified-identifier
// field-name ::= qualified-identifier

StructDeclaration =
  'struct' struct_name:QualifiedIdentifier StructInheritsClause? StructBodyOrNewline

StructInheritsClause =
  'inherits' base_name:QualifiedIdentifier StructInheritsCondition?

StructInheritsCondition =
  '(' field_name:QualifiedIdentifier '==' field_value:Expression ')'

StructBodyOrNewline =
  StructBody | 'newline'

StructBody =
  ':' 'newline' 'indent' StructMemberDeclList 'dedent'

StructMemberDeclList =
  StructMemberDecl*

StructMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration


// actor-declaration ::= 'actor' actor-name ['inherits' actor-name ['(' field-name '==' (enum-value-reference | bool-literal) ')']] ( (':' NEWLINE INDENT
//       actor-member-decl+ DEDENT) | NEWLINE )
//
// actor-member-decl ::= event-declaration | field-declaration | constraint-declaration | method-declaration | coverage-declaration
// actor-name ::= qualified-identifier

ActorDeclaration =
  'actor' actor_name:QualifiedIdentifier ActorInheritsClause? ActorBodyOrNewline

ActorInheritsClause =
  'inherits' base_name:QualifiedIdentifier ActorInheritsCondition?

ActorInheritsCondition =
  '(' field_name:QualifiedIdentifier '==' field_value:Expression ')'

ActorBodyOrNewline =
  ActorBody | 'newline'

ActorBody =
  ':' 'newline' 'indent' ActorMemberDeclList 'dedent'

ActorMemberDeclList =
  ActorMemberDecl*

ActorMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration


// scenario-declaration ::= 'scenario' qualified-behavior-name ['inherits' qualified-behavior-name ['(' field-name '==' (enum-value-reference | bool-literal) ')']] ( (':' NEWLINE INDENT
//       (scenario-member-decl | behavior-specification)+
//       DEDENT) | NEWLINE )
//
// scenario-member-decl ::= event-declaration | field-declaration | constraint-declaration | method-declaration | coverage-declaration | modifier-application
//
// qualified-behavior-name ::= [actor-name '.'] behavior-name
// behavior-name ::= qualified-identifier

ScenarioDeclaration =
  'scenario' scenario_name:QualifiedBehaviorName ScenarioInheritsClause? ScenarioBodyOrNewline

ScenarioInheritsClause =
  'inherits' base_name:QualifiedBehaviorName ScenarioInheritsCondition?

ScenarioInheritsCondition =
  '(' field_name:QualifiedIdentifier '==' field_value:Expression ')'

ScenarioBodyOrNewline =
  ScenarioBody | 'newline'

ScenarioBody =
  ':' 'newline' 'indent' ScenarioMemberItemList 'dedent'

ScenarioMemberItemList =
  ScenarioMemberItem*

ScenarioMemberItem =
  ScenarioMemberDecl
| BehaviorSpecification

ScenarioMemberDecl =
  EventDeclaration
| FieldDeclaration
| ConstraintDeclaration
| MethodDeclaration
| CoverageDeclaration
| ModifierApplication

QualifiedBehaviorName =
  QualifiedIdentifier
| PrefixedBehaviorName

PrefixedBehaviorName =
  actor_name:QualifiedIdentifier '.' behavior_name:QualifiedIdentifier


// action-declaration ::= 'action' qualified-behavior-name ['inherits' qualified-behavior-name ['(' field-name '==' (enum-value-reference | bool-literal) ')']] ( (':' NEWLINE INDENT
//       (scenario-member-decl | behavior-specification)+
//       DEDENT) | NEWLINE )

ActionDeclaration =
  'action' action_name:QualifiedBehaviorName ActionInheritsClause? ActionBodyOrNewline

ActionBodyOrNewline =
  ActionBody | 'newline'

ActionInheritsClause =
  'inherits' base_name:QualifiedBehaviorName ActionInheritsCondition?

ActionInheritsCondition =
  '(' field_name:QualifiedIdentifier '==' field_value:Expression ')'

ActionBody =
  ':' 'newline' 'indent' ActionMemberItemList 'dedent'

ActionMemberItemList =
  ActionMemberItem*

ActionMemberItem =
  ScenarioMemberDecl
| BehaviorSpecification


// modifier-declaration ::= 'modifier' [actor-name '.'] modifier-name ['of' qualified-behavior-name] ( (':' NEWLINE INDENT
//       (scenario-member-decl | on-directive)+
//       DEDENT) | NEWLINE )
//
// modifier-name ::= qualified-identifier

ModifierDeclaration =
  'modifier' modifier_name:QualifiedBehaviorName ModifierOfClause? ModifierBodyOrNewline

ModifierOfClause =
  'of' QualifiedBehaviorName

ModifierBodyOrNewline =
  ModifierBody | 'newline'

ModifierBody =
  ':' 'newline' 'indent' ModifierMemberItemList 'dedent'

ModifierMemberItemList =
  ModifierMemberItem*

ModifierMemberItem =
  ScenarioMemberDecl
| OnDirective


// type-extension ::= enum-type-extension | structured-type-extension
//
// enum-type-extension ::= 'extend' enum-name ':' '[' enum-member-decl (',' enum-member-decl)* ']' NEWLINE
//
// structured-type-extension ::= 'extend' extendable-type-name ':' NEWLINE INDENT
//       extension-member-decl+ DEDENT
//
// extendable-type-name ::= struct-name | actor-name | qualified-behavior-name
// extension-member-decl ::= struct-member-decl | actor-member-decl | scenario-member-decl | behavior-specification

TypeExtension =
  EnumTypeExtension
| StructuredTypeExtension

EnumTypeExtension =
  'extend' enum_name:QualifiedIdentifier ':' '[' EnumMemberDeclList ']' 'newline'

StructuredTypeExtension =
  'extend' extendable_type_name:TypeReference ':' 'newline' 'indent' ExtensionMemberDeclList 'dedent'

ExtensionMemberDeclList =
  ExtensionMemberDecl*

ExtensionMemberDecl =
  RelaxedExtensionMemberDecl
| BehaviorSpecification

RelaxedExtensionMemberDecl =
  EventDeclaration
| ParameterDeclaration
| VariableDeclaration
| KeepConstraintDeclaration
| RemoveDefaultDeclaration
| MethodDeclaration
| CoverageDeclaration
| ModifierApplication


// global-parameter-declaration ::= 'global' parameter-declaration

GlobalParameterDeclaration =
  'global' ParameterDeclaration


// event-declaration ::= 'event' event-name ['(' argument-list-specification ')'] ['is' event-specification] NEWLINE
// event-specification ::= event-reference [ [event-field-decl] 'if' event-condition ]
//                        | event-condition
//
// event-reference ::= '@' event-path
// event-field-decl ::= 'as' event-field-name
// event-field-name ::= qualified-identifier
// event-name ::= qualified-identifier
// event-path ::= [expression '.'] event-name
//
// event-condition ::= bool-expression | rise-expression | fall-expression | elapsed-expression | every-expression
// rise-expression ::= 'rise' '(' bool-expression ')'
// fall-expression ::= 'fall' '(' bool-expression ')'
// elapsed-expression ::= 'elapsed' '(' duration-expression ')'
// every-expression ::= 'every' '(' duration-expression [',' 'offset' ':' duration-expression] ')'
//
// bool-expression ::= expression
// duration-expression ::= expression

EventDeclaration =
  'event' event_name:QualifiedIdentifier EventArgumentListSpecification? EventIsClause? 'newline'

EventArgumentListSpecification =
  '(' ArgumentListSpecification ')'

EventIsClause =
  'is' EventSpecification

EventSpecification =
  EventReferenceSpecification
| EventCondition

EventReferenceSpecification =
  EventReference EventReferenceCondition?

EventReferenceCondition =
  EventFieldDecl? 'if' EventCondition

EventReference =
  '@' EventPath

EventFieldDecl =
  'as' event_field_name:QualifiedIdentifier

EventPath =
  QualifiedIdentifier
| PrefixedEventPath

PrefixedEventPath =
  Expression '.' event_name:QualifiedIdentifier

EventCondition =
  Expression
| RiseExpression
| FallExpression
| ElapsedExpression
| EveryExpression

RiseExpression =
  'rise' '(' condition:Expression ')'

FallExpression =
  'fall' '(' condition:Expression ')'

ElapsedExpression =
  'elapsed' '(' duration:Expression ')'

EveryExpression =
  'every' '(' duration:Expression TrailingEveryExpOffset? ')'

TrailingEveryExpOffset =
  ',' 'offset' ':' duration:Expression


// field-declaration ::=  parameter-declaration | variable-declaration
// parameter-declaration ::= field-name (',' field-name)* ':' type-declarator ['=' default-value] ( parameter-with-declaration | NEWLINE )
// variable-declaration ::= 'var' field-name (',' field-name)* ':' type-declarator ['=' (default-value | sample-expression) ] NEWLINE
//
// sample-expression ::= 'sample' '(' expression ',' event-specification [',' default-value] ')'
// default-value ::= expression
//
// parameter-with-declaration ::= 'with' ':' NEWLINE INDENT
//       parameter-with-member+ DEDENT
// parameter-with-member ::= constraint-declaration

FieldDeclaration =
  ParameterDeclaration
| VariableDeclaration

ParameterDeclaration =
  FieldNameList ':' TypeDeclarator ParameterInitilizerClause? ParameterWithDeclarationOrNewline

FieldNameList =
  QualifiedIdentifier (',' QualifiedIdentifier)*

ParameterInitilizerClause =
  '=' default_value:Expression

VariableDeclaration =
  'var' field_name:FieldNameList ':' TypeDeclarator VariableInitializer? 'newline'

VariableInitializer =
  '=' VariableInitializerValue

VariableInitializerValue =
  Expression
| SampleExpression

SampleExpression =
  'sample' '(' Expression ',' EventSpecification SampleDefaultValue? ')'

SampleDefaultValue =
  ',' default_value:Expression

ParameterWithDeclarationOrNewline =
  ParameterWithDeclaration | 'newline'

ParameterWithDeclaration =
  'with' ':' 'newline' 'indent' ParameterWithMember 'dedent'

ParameterWithMember =
  ConstraintDeclaration


// constraint-declaration ::= keep-constraint-declaration | remove-default-declaration
//
// keep-constraint-declaration ::= 'keep' '(' [constraint-qualifier] constraint-expression ')' NEWLINE
// constraint-qualifier ::= 'default' | 'hard'
//
// constraint-expression ::= expression
//
// remove-default-declaration ::= 'remove_default' '(' parameter-reference ')' NEWLINE
//
// parameter-reference ::= field-name | field-access

ConstraintDeclaration =
  KeepConstraintDeclaration
| RemoveDefaultDeclaration

KeepConstraintDeclaration =
  'keep' '(' ConstraintQualifier? constraint:Expression ')' 'newline'

ConstraintQualifier =
  'default' | 'hard'

RemoveDefaultDeclaration =
  'remove_default' '(' ParameterReference ')' 'newline'

ParameterReference =
  QualifiedIdentifier
| FieldAccess


// method-declaration ::= 'def' method-name '(' [argument-list-specification] ')' ['->' return-type] method-implementation NEWLINE
//
// return-type ::= type-declarator
//
// method-implementation ::= 'is' [method-qualifier] ('expression' expression | 'undefined' | 'external' structured-identifier '(' [argument-list] ')')
//
// method-qualifier ::= 'only'
// method-name ::= qualified-identifier

MethodDeclaration =
  'def' method_name:QualifiedIdentifier '(' ArgumentListSpecification? ')' MethodReturnType? MethodImplementation 'newline'

MethodReturnType =
  '->' return_type:TypeDeclarator

MethodImplementation =
  'is' MethodQualifier? MethodBody

MethodQualifier =
  'only'

MethodBody =
  MethodExpressionBody
| 'undefined'
| MethodExternalBody

MethodExpressionBody =
  'expression' Expression

MethodExternalBody =
  'external' StructuredIdentifier '(' ArgumentList? ')'


// coverage-declaration ::= ('cover' | 'record') '(' argument-list ')' NEWLINE

CoverageDeclaration =
  CoverageOperator '(' ArgumentList ')' 'newline'

CoverageOperator =
  'cover' | 'record'


// modifier-application ::= [actor-expression '.'] modifier-name '(' [argument-list] ')' NEWLINE

ModifierApplication =
  ActorPath '(' ArgumentList? ')' 'newline'

ActorPath =
  QualifiedIdentifier
| PrefixedActorPath

PrefixedActorPath =
  Expression '.' actor_name:QualifiedIdentifier


// behavior-specification ::= on-directive | do-directive

BehaviorSpecification =
  OnDirective
| DoDirective


// on-directive ::= 'on' event-specification ':' NEWLINE INDENT
//      on-member+ DEDENT
//
// on-member ::= call-directive | emit-directive

OnDirective =
  'on' EventSpecification ':' 'newline' 'indent' OnMemberList 'dedent'

OnMemberList =
  OnMember*

OnMember =
  CallDirective
| EmitDirective


// do-directive ::= 'do' do-member
//
// do-member ::= [label-name ':'] ( composition | behavior-invocation | wait-directive | emit-directive | call-directive )
//
// label-name ::= qualified-identifier

DoDirective =
  'do' DoMember

DoMember =
  DoMemberLabel? DoMemberBody

DoMemberLabel =
  label_name:QualifiedIdentifier ':'

DoMemberBody =
  Composition
| BehaviorInvocation
| WaitDirective
| EmitDirective
| CallDirective


// composition ::= composition-operator ['(' [unqualified-argument-list] ')']':' NEWLINE INDENT
//      do-member+ DEDENT [behavior-with-declaration]
//
// composition-operator ::= 'serial' | 'one_of' | 'parallel'

Composition =
  CompositionOperator CompositionArguments? ':' 'newline' 'indent' DoMemberList 'dedent' BehaviorWithDeclaration?

CompositionArguments =
  '(' UnqualifiedArgumentList ')'

DoMemberList =
  DoMember*

CompositionOperator =
  'serial' | 'one_of' | 'parallel'


// behavior-invocation ::= [actor-expression '.'] behavior-name '(' [argument-list] ')' ( behavior-with-declaration | NEWLINE )
//
// behavior-with-declaration ::= 'with' ':' NEWLINE INDENT
//       behavior-with-member+ DEDENT
// behavior-with-member ::= constraint-declaration
//                        | modifier-application
//                        | until-directive
//
// actor-expression ::= expression

BehaviorInvocation =
  BehaviorPath '(' ArgumentList? ')' BehaviorWithDeclarationOrNewline

BehaviorPath =
  QualifiedBehaviorName
| PrefixedBehaviorPath

PrefixedBehaviorPath =
  actor_expr:Expression '.' behavior_name:QualifiedIdentifier

BehaviorWithDeclarationOrNewline =
  BehaviorWithDeclaration | 'newline'

BehaviorWithDeclaration =
  'with' ':' 'newline' 'indent' BehaviorWithMemberList 'dedent'

BehaviorWithMemberList =
  BehaviorWithMember*

BehaviorWithMember =
  ConstraintDeclaration
| ModifierApplication
| UntilDirective


// wait-directive ::= 'wait' event-specification NEWLINE

WaitDirective =
  'wait' EventSpecification 'newline'


// emit-directive ::= 'emit' event-name ['(' argument-list ')'] NEWLINE

EmitDirective =
  'emit' event_name:QualifiedIdentifier EmitArguments? 'newline'

EmitArguments =
  '(' ArgumentList ')'


// call-directive ::= 'call' method-invocation NEWLINE
//
// method-invocation ::= postfix-exp '(' [argument-list] ')'

CallDirective =
  'call' MethodInvocation 'newline'

MethodInvocation =
  Expression '(' ArgumentList? ')'


// until-directive ::= 'until' event-specification NEWLINE

UntilDirective =
  'until' EventSpecification 'newline'


// argument-list-specification ::= argument-specification (',' argument-specification)*
//
// argument-specification ::= argument-name ':' type-declarator ['=' default-value]
//
// argument-name ::= qualified-identifier

ArgumentListSpecification =
  ArgumentSpecification (',' ArgumentSpecification)*

ArgumentSpecification =
  argument_name:QualifiedIdentifier ':' TypeDeclarator ArgumentInitializer?

ArgumentInitializer =
  '=' default_value:Expression


// argument-list ::= positional-argument (',' positional-argument)* (',' named-argument)*
//                 | named-argument (',' named-argument)*
//
// positional-argument ::= expression
// named-argument ::= argument-name ':' expression

ArgumentList =
  PositionalArgumentList? NamedArgumentList?

PositionalArgumentList =
  Expression (',' Expression)* ','?

NamedArgumentList =
  NamedArgument (',' NamedArgument)*

NamedArgument =
  argument_name:QualifiedIdentifier ':' Expression


// unqualified-argument-list ::= positional-argument (',' positional-argument)* (',' unqualified-named-argument)*
//                             | unqualified-named-argument (',' unqualified-named-argument)*
//
// unqualified-argument-name ::= identifier
// unqualified-named-argument ::= unqualified-argument-name ':' expression

UnqualifiedArgumentList =
  PositionalArgumentList? UnqualifiedNamedArgumentList?

UnqualifiedNamedArgumentList =
  UnqualifiedNamedArgument (',' UnqualifiedNamedArgument)*

UnqualifiedNamedArgument =
  unqualified_argument_name:'identifier' ':' Expression


// expression ::= implication | ternary-op-exp

Expression =
  TernaryOpExp
| LogicalOpExp
| BinaryOpExp
| UnaryOpExp
| CastExp
| TypeTestExp
| ElementAccess
| FunctionApplication
| FieldAccess
| ItExp
| QualifiedIdentifier
| ParenthesizedExp
| LiteralExp
| EnumValueReference
| ListConstructor
| RangeConstructor


// ternary-op-exp ::= implication '?' expression ':' expression

TernaryOpExp =
  condition:Expression '?' then_expr:Expression ':' else_expr:Expression


// implication ::= disjunction ('=>' disjunction)*
// disjunction ::= conjunction ('or' conjunction)*
// conjunction ::= inversion ('and' inversion)*
// inversion ::= 'not' inversion | relation

LogicalOpExp =
  lhs_expr:Expression LogicalOp rhs_expr:Expression

LogicalOp =
  '=>' | 'or' | 'and'


// relation ::= sum | relation relational-op sum
// relational-op ::= '==' | '!=' | '<' | '<=' | '>' | '>=' | 'in'
//
// sum ::= term | sum additive-op term
// additive-op ::= '+' | '-'
//
// term ::= factor | term multiplicative-op factor
// multiplicative-op ::= '*' | '/' | '%'
//
// factor ::= postfix-exp | '-' factor

BinaryOpExp =
  lhs_expr:Expression BinaryOp rhs_expr:Expression

BinaryOp =
  '==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | '+' | '-' | '*' | '/' | '%'

UnaryOpExp =
  UnaryOp Expression

UnaryOp =
  'not' | '-'


// postfix-exp ::= primary-exp
//               | cast-exp
//               | type-test-exp
//               | element-access
//               | function-application
//               | field-access
//
// cast-exp ::= postfix-exp '.' 'as' '(' type-declarator ')'
// type-test-exp ::= postfix-exp '.' 'is' '(' type-declarator ')'
// element-access ::= postfix-exp '[' expression ']'
// function-application ::= postfix-exp '(' [argument-list] ')'
// field-access ::= postfix-exp '.' field-name

CastExp =
  Expression '.' 'as' '(' TypeDeclarator ')'

TypeTestExp =
  Expression '.' 'is' '(' TypeDeclarator ')'

ElementAccess =
  object_expr:Expression '[' index_expr:Expression ']'

FunctionApplication =
  Expression '(' ArgumentList? ')'

FieldAccess =
  Expression '.' field_name:QualifiedIdentifier


// primary-exp ::= value-exp | 'it' | qualified-identifier | '(' expression ')'
//
// value-exp ::= integer-literal
//             | float-literal
//             | physical-literal
//             | bool-literal
//             | string-literal
//             | enum-value-reference
//             | list-constructor
//             | range-constructor

ItExp =
  'it'

ParenthesizedExp =
  '(' Expression ')'

LiteralExp =
  'integer_literal'
| 'float_literal'
| PhysicalLiteral
| BoolLiteral
| 'string_literal'


// list-constructor ::= '[' expression (',' expression)* ']'
//
// range-constructor ::= 'range' '(' expression ',' expression ')' | '[' expression '..' expression ']'

ListConstructor =
  '[' ExpressionList ']'

ExpressionList =
  Expression (',' Expression)*

RangeConstructor =
  ParenthesesRangeConstructor
| BracketsRangeConstructor

ParenthesesRangeConstructor =
  'range' '(' begin_expr:Expression ',' end_expr:Expression ')'

BracketsRangeConstructor =
  '[' begin_expr:Expression '..' end_expr:Expression ']'
